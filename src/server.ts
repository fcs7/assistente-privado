// üöÄ WHMCS Assistant Server Entry Point
import app, { initializeApp } from './app';
import { config } from './config';
import { createLogger } from './utils/logger';

const logger = createLogger({ service: 'server' });

// Inicializar e startar servidor
async function startServer() {
  try {
    // Inicializar aplica√ß√£o
    await initializeApp();

    // Iniciar servidor
    const PORT = config.app.port;
    
    const server = app.listen(PORT, () => {
      console.log(`
============================================================
ü§ñ WHMCS Assistant - ONLINE
============================================================

üåê Servidor: http://localhost:${PORT}
üì± Webhook: http://localhost:${PORT}/webhook  
üè• Health: http://localhost:${PORT}/health
üîß Fun√ß√µes: http://localhost:${PORT}/functions

üìä Configura√ß√£o:
${config.openai.apiKey ? '‚úÖ' : '‚ùå'} OpenAI API
${config.whmcs.apiUrl ? '‚úÖ' : '‚ùå'} WHMCS API  
${config.whaticket.url ? '‚úÖ' : '‚ùå'} WhaTicket API

üîß Fun√ß√µes WHMCS: ${require('./factories/FunctionFactory').FunctionFactory.getAvailableFunctions().length} registradas
üìä Status: ${config.openai.apiKey && config.whmcs.apiUrl ? 'healthy' : 'unhealthy'}
üïê Iniciado em: ${new Date().toLocaleString('pt-BR')}

üí° Pronto para receber mensagens do WhatsApp via WhaTicket!
        
============================================================
      `);
      
      logger.info('üöÄ Servidor iniciado', {
        port: PORT,
        env: config.app.env,
        functionsCount: require('./factories/FunctionFactory').FunctionFactory.getAvailableFunctions().length
      });
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      logger.info('SIGTERM received, shutting down gracefully');
      server.close(() => {
        logger.info('Server closed');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      logger.info('SIGINT received, shutting down gracefully');
      server.close(() => {
        logger.info('Server closed');  
        process.exit(0);
      });
    });

  } catch (error) {
    logger.error('‚ùå Falha ao iniciar servidor', error);
    process.exit(1);
  }
}

// Para desenvolvimento com ts-node ou produ√ß√£o com node
if (require.main === module) {
  startServer();
}

export default startServer;