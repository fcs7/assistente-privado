import { z } from 'zod';
import { BaseFunction } from './base/BaseFunction';
import { WHMCSService } from '../services/WHMCSService';
import { schemas } from '../utils/validators';
import type { FunctionContext, FunctionResult, WHMCSClient, WHMCSService as WHMCSServiceType } from '../types';

// ‚úÖ Fun√ß√£o para verificar status dos servi√ßos do cliente
export class CheckServiceStatus extends BaseFunction {
  readonly name = 'check_service_status';
  readonly description = 'Verifica o status dos servi√ßos/produtos de um cliente no WHMCS';
  
  readonly parameters = {
    type: 'object',
    properties: {
      client_identifier: {
        type: 'string',
        description: 'Email, CPF/CNPJ, ID ou dom√≠nio do cliente'
      },
      domain: {
        type: 'string',
        description: 'Dom√≠nio espec√≠fico para verificar (opcional)'
      },
      service_id: {
        type: 'integer',
        description: 'ID espec√≠fico do servi√ßo para verificar (opcional)'
      }
    },
    required: ['client_identifier']
  };
  
  async execute(args: any, context?: FunctionContext): Promise<FunctionResult> {
    try {
      // üõ°Ô∏è Validar argumentos
      const validated = this.validateArgs(args, schemas.checkServiceStatus);
      
      const whmcsService = new WHMCSService();
      
      // üìã 1. Buscar cliente
      this.logger.info('Buscando cliente...', { identifier: validated.client_identifier });
      
      const client = await whmcsService.findClient(validated.client_identifier);
      
      if (!client) {
        return this.createErrorResult(
          '‚ùå Cliente n√£o encontrado. Verifique o email, CPF/CNPJ ou ID informado.'
        );
      }
      
      // üåê 2. Buscar servi√ßos
      this.logger.info('Buscando servi√ßos...', { 
        clientId: client.id,
        domain: validated.domain,
        serviceId: validated.service_id
      });
      
      const services = await whmcsService.getServices({
        clientId: client.id,
        domain: validated.domain
      });
      
      // üîç 3. Filtrar por service_id se especificado
      let filteredServices = services;
      if (validated.service_id) {
        filteredServices = services.filter(service => service.id === validated.service_id);
      }
      
      // üì± 4. Formatar resposta para WhatsApp
      const response = this.formatResponse(client, filteredServices);
      
      return this.createSuccessResult(response.message, {
        client: {
          id: client.id,
          name: client.fullname,
          email: client.email
        },
        services: filteredServices.map(service => ({
          id: service.id,
          name: service.name,
          domain: service.domain,
          status: service.status,
          nextDueDate: service.recurringamount ? 'Recurring' : 'One-time'
        })),
        summary: response.summary
      });
      
    } catch (error) {
      this.logger.error('Erro ao verificar status dos servi√ßos', error);
      
      return this.createErrorResult(
        '‚ùå Erro interno ao verificar servi√ßos. Tente novamente.',
        error instanceof Error ? error.message : undefined
      );
    }
  }
  
  // üí¨ Formatar resposta para WhatsApp
  private formatResponse(
    client: WHMCSClient,
    services: WHMCSServiceType[]
  ): { message: string; summary: any } {
    
    const clientName = client.fullname || `${client.firstname} ${client.lastname}`.trim();
    
    let message = `üåê *Servi√ßos de ${clientName}*\n\n`;
    
    if (services.length === 0) {
      message += 'üì≠ Nenhum servi√ßo encontrado para este cliente.';
      
      return {
        message: this.formatWhatsAppMessage(message),
        summary: {
          totalServices: 0,
          activeServices: 0,
          suspendedServices: 0,
          terminatedServices: 0
        }
      };
    }
    
    // üìä Calcular estat√≠sticas
    const stats = {
      totalServices: services.length,
      activeServices: services.filter(s => s.status === 'Active').length,
      suspendedServices: services.filter(s => s.status === 'Suspended').length,
      terminatedServices: services.filter(s => s.status === 'Terminated').length,
      pendingServices: services.filter(s => s.status === 'Pending').length
    };
    
    message += `Encontrei *${services.length}* servi√ßo(s):\n\n`;
    
    // üåê Processar cada servi√ßo
    for (const service of services) {
      const statusEmoji = this.getStatusEmoji(service.status);
      
      message += `${statusEmoji} *${service.name || service.translated_name || 'Servi√ßo'}*\n`;
      
      if (service.domain) {
        message += `   üåç Dom√≠nio: ${service.domain}\n`;
      }
      
      message += `   üìä Status: ${this.translateServiceStatus(service.status)}\n`;
      
      if (service.amount && parseFloat(service.amount) > 0) {
        message += `   üí∞ Valor: ${this.formatCurrency(service.amount)}\n`;
      }
      
      if (service.regdate) {
        message += `   üìÖ Criado em: ${this.formatDate(service.regdate)}\n`;
      }
      
      // Informa√ß√µes espec√≠ficas baseadas no status
      if (service.status === 'Active') {
        message += '   ‚úÖ Servi√ßo funcionando normalmente\n';
        
        // Informa√ß√µes de uso se dispon√≠veis
        if (service.disk_usage && service.disk_limit) {
          const diskUsagePercent = (service.disk_usage / service.disk_limit) * 100;
          message += `   üíΩ Disco: ${service.disk_usage}MB / ${service.disk_limit}MB (${diskUsagePercent.toFixed(1)}%)\n`;
        }
        
        if (service.bw_usage && service.bw_limit) {
          const bwUsagePercent = (service.bw_usage / service.bw_limit) * 100;
          message += `   üîÑ Tr√°fego: ${service.bw_usage}MB / ${service.bw_limit}MB (${bwUsagePercent.toFixed(1)}%)\n`;
        }
        
      } else if (service.status === 'Suspended') {
        message += '   ‚ö†Ô∏è Servi√ßo suspenso - verifique pagamentos\n';
        
      } else if (service.status === 'Terminated') {
        message += '   ‚ùå Servi√ßo cancelado\n';
        
      } else if (service.status === 'Pending') {
        message += '   üü° Servi√ßo aguardando ativa√ß√£o\n';
      }
      
      // Credenciais se dispon√≠veis e servi√ßo ativo
      if (service.status === 'Active' && service.username) {
        message += `   üë§ Usu√°rio: ${service.username}\n`;
        // Note: N√£o exibimos senhas por seguran√ßa
        message += '   üîí Senha: (dispon√≠vel no painel de controle)\n';
      }
      
      // Servidor se dispon√≠vel
      if (service.serverhostname || service.serverip) {
        message += `   üñ•Ô∏è Servidor: ${service.serverhostname || service.serverip}\n`;
      }
      
      message += '\n';
    }
    
    // üìä Resumo se houver m√∫ltiplos servi√ßos
    if (services.length > 1) {
      message += 'üìä *Resumo:*\n';
      message += `   üìà Total: ${stats.totalServices} servi√ßos\n`;
      
      if (stats.activeServices > 0) {
        message += `   ‚úÖ Ativos: ${stats.activeServices}\n`;
      }
      
      if (stats.suspendedServices > 0) {
        message += `   ‚ö†Ô∏è Suspensos: ${stats.suspendedServices}\n`;
      }
      
      if (stats.terminatedServices > 0) {
        message += `   ‚ùå Cancelados: ${stats.terminatedServices}\n`;
      }
      
      if (stats.pendingServices > 0) {
        message += `   üü° Pendentes: ${stats.pendingServices}\n`;
      }
    }
    
    // üí° Dicas baseadas no status
    if (stats.suspendedServices > 0) {
      message += '\nüí° *Dica:* Servi√ßos suspensos podem ser reativados ap√≥s quita√ß√£o de pend√™ncias.';
    } else if (stats.activeServices === stats.totalServices && stats.totalServices > 0) {
      message += '\n‚úÖ *Parab√©ns!* Todos os seus servi√ßos est√£o funcionando normalmente.';
    }
    
    return {
      message: this.formatWhatsAppMessage(message),
      summary: stats
    };
  }
  
  // üåç Traduzir status de servi√ßos para portugu√™s
  private translateServiceStatus(status: string): string {
    const translations: Record<string, string> = {
      'Active': 'Ativo',
      'Pending': 'Pendente',
      'Suspended': 'Suspenso',
      'Terminated': 'Cancelado',
      'Cancelled': 'Cancelado',
      'Fraud': 'Bloqueado por Fraude'
    };
    
    return translations[status] || status;
  }
}