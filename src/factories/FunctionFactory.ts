import { BaseFunction } from '../functions/base/BaseFunction';
import { createLogger } from '../utils/logger';
import type { IBaseFunction, FunctionDefinition, FunctionContext, FunctionResult } from '../types';

// üè≠ Factory Pattern para fun√ß√µes WHMCS - M√°xima Extensibilidade
export class FunctionFactory {
  private static functions = new Map<string, () => BaseFunction>();
  private static logger = createLogger({ service: 'factory' });
  
  // üìù Registrar nova fun√ß√£o no factory
  static register(name: string, creator: () => BaseFunction): void {
    this.functions.set(name, creator);
    this.logger.info(`‚úÖ Fun√ß√£o registrada: ${name}`);
  }
  
  // üéØ Criar inst√¢ncia de uma fun√ß√£o
  static create(name: string): BaseFunction | null {
    const creator = this.functions.get(name);
    
    if (!creator) {
      this.logger.warn(`‚ùå Fun√ß√£o n√£o encontrada: ${name}`);
      return null;
    }
    
    try {
      const instance = creator();
      this.logger.debug(`üî® Inst√¢ncia criada: ${name}`);
      return instance;
    } catch (error) {
      this.logger.error(`Erro ao criar fun√ß√£o ${name}`, error);
      return null;
    }
  }
  
  // üîß Executar fun√ß√£o com contexto
  static async execute(
    name: string, 
    args: any, 
    context?: FunctionContext
  ): Promise<FunctionResult> {
    const functionInstance = this.create(name);
    
    if (!functionInstance) {
      return {
        success: false,
        message: `‚ùå Fun√ß√£o '${name}' n√£o encontrada ou n√£o implementada`,
        error: 'Function not found'
      };
    }
    
    try {
      // Usar executeWithLogging da BaseFunction para m√©tricas
      return await functionInstance.executeWithLogging(args, context);
    } catch (error) {
      this.logger.error(`Erro ao executar fun√ß√£o ${name}`, error);
      
      return {
        success: false,
        message: '‚ùå Erro interno ao executar fun√ß√£o',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }
  
  // üìã Listar todas as fun√ß√µes dispon√≠veis
  static getAvailableFunctions(): string[] {
    return Array.from(this.functions.keys());
  }
  
  // üìä Obter informa√ß√µes de uma fun√ß√£o
  static getFunctionInfo(name: string): any {
    const functionInstance = this.create(name);
    
    if (!functionInstance) {
      return null;
    }
    
    return functionInstance.getInfo();
  }
  
  // ü§ñ Gerar defini√ß√µes para OpenAI Assistant
  static getOpenAIFunctionDefinitions(): FunctionDefinition[] {
    const definitions: FunctionDefinition[] = [];
    
    for (const [name, creator] of this.functions.entries()) {
      try {
        const instance = creator();
        const definition = instance.getOpenAIDefinition();
        definitions.push(definition);
        
        this.logger.debug(`üì§ Defini√ß√£o OpenAI gerada: ${name}`);
      } catch (error) {
        this.logger.error(`Erro ao gerar defini√ß√£o OpenAI para ${name}`, error);
      }
    }
    
    return definitions;
  }
  
  // üîç Verificar se fun√ß√£o existe
  static hasFunction(name: string): boolean {
    return this.functions.has(name);
  }
  
  // üóëÔ∏è Remover fun√ß√£o (√∫til para testes)
  static unregister(name: string): boolean {
    const existed = this.functions.delete(name);
    
    if (existed) {
      this.logger.info(`üóëÔ∏è Fun√ß√£o removida: ${name}`);
    }
    
    return existed;
  }
  
  // üßπ Limpar todas as fun√ß√µes (√∫til para testes)
  static clear(): void {
    const count = this.functions.size;
    this.functions.clear();
    this.logger.info(`üßπ ${count} fun√ß√µes removidas do factory`);
  }
  
  // üìà Estat√≠sticas do factory
  static getStats(): {
    totalFunctions: number;
    functionNames: string[];
    lastRegistered?: string;
  } {
    const functionNames = this.getAvailableFunctions();
    
    return {
      totalFunctions: functionNames.length,
      functionNames,
      lastRegistered: functionNames[functionNames.length - 1]
    };
  }
  
  // üîÑ Recarregar fun√ß√£o (√∫til para desenvolvimento)
  static reload(name: string, creator: () => BaseFunction): boolean {
    if (this.functions.has(name)) {
      this.functions.set(name, creator);
      this.logger.info(`üîÑ Fun√ß√£o recarregada: ${name}`);
      return true;
    }
    
    return false;
  }
  
  // üéØ Auto-register de fun√ß√µes (busca autom√°tica - para futuras expans√µes)
  static autoRegister(functionInstances: { [key: string]: () => BaseFunction }): void {
    let registered = 0;
    
    Object.entries(functionInstances).forEach(([name, creator]) => {
      this.register(name, creator);
      registered++;
    });
    
    this.logger.info(`üöÄ Auto-registradas ${registered} fun√ß√µes`);
  }
  
  // üè• Health check do factory
  static healthCheck(): {
    status: 'healthy' | 'unhealthy';
    functionsCount: number;
    issues: string[];
  } {
    const issues: string[] = [];
    const functionsCount = this.functions.size;
    
    if (functionsCount === 0) {
      issues.push('Nenhuma fun√ß√£o registrada');
    }
    
    // Verificar se todas as fun√ß√µes podem ser instanciadas
    for (const [name, creator] of this.functions.entries()) {
      try {
        const instance = creator();
        if (!instance.name || !instance.description) {
          issues.push(`Fun√ß√£o ${name} tem propriedades obrigat√≥rias faltando`);
        }
      } catch (error) {
        issues.push(`Fun√ß√£o ${name} n√£o pode ser instanciada: ${error}`);
      }
    }
    
    return {
      status: issues.length === 0 ? 'healthy' : 'unhealthy',
      functionsCount,
      issues
    };
  }
}

// üéâ Auto-registrar fun√ß√µes quando dispon√≠veis
// Este c√≥digo ser√° executado quando as fun√ß√µes forem importadas

export function registerWHMCSFunctions() {
  try {
    // Importar e registrar fun√ß√µes WHMCS
    const { GetClientInvoices } = require('../functions/GetClientInvoices');
    const { CheckServiceStatus } = require('../functions/CheckServiceStatus');
    const { CreateTicket } = require('../functions/CreateTicket');
    
    FunctionFactory.register('get_client_invoices', () => new GetClientInvoices());
    FunctionFactory.register('check_service_status', () => new CheckServiceStatus());
    FunctionFactory.register('create_ticket', () => new CreateTicket());
    
    FunctionFactory['logger'].info('‚úÖ 3 fun√ß√µes WHMCS registradas com sucesso!');
    
  } catch (error) {
    FunctionFactory['logger'].error('Erro ao registrar fun√ß√µes WHMCS', error);
    // Fallback silencioso - as fun√ß√µes ser√£o registradas quando dispon√≠veis
  }
}

// üöÄ Executar auto-registro
registerWHMCSFunctions();

// üîÑ Fun√ß√£o utilit√°ria para registrar fun√ß√£o individual de forma segura
export function safeRegister(name: string, creator: () => BaseFunction): boolean {
  try {
    FunctionFactory.register(name, creator);
    return true;
  } catch (error) {
    FunctionFactory['logger'].error(`Erro ao registrar fun√ß√£o ${name}`, error);
    return false;
  }
}

// üì§ Exportar apenas default para evitar conflitos
export default FunctionFactory;