#!/bin/bash

# üöÄ WHMCS Assistant - Quick Start Ubuntu
# Inicia o sistema rapidamente ap√≥s instala√ß√£o

set -e

echo "üöÄ WHMCS Assistant - Quick Start"
echo "==============================="
echo ""

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Execute no diret√≥rio do projeto WHMCS Assistant!"
    exit 1
fi

# Verificar se .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "üí° Execute primeiro: ./install-ubuntu.sh"
    exit 1
fi

# Fun√ß√£o para verificar se uma vari√°vel est√° configurada no .env
check_env_var() {
    local var_name=$1
    local var_value=$(grep "^$var_name=" .env 2>/dev/null | cut -d'=' -f2)
    
    if [ -z "$var_value" ] || [[ "$var_value" == *"xxx"* ]] || [[ "$var_value" == *"seu_"* ]] || [[ "$var_value" == *"gere_com"* ]]; then
        return 1
    else
        return 0
    fi
}

echo "üîç Verificando configura√ß√£o..."

# Verificar configura√ß√µes essenciais
missing_configs=()

if ! check_env_var "OPENAI_API_KEY"; then
    missing_configs+=("OPENAI_API_KEY")
fi

if ! check_env_var "OPENAI_ASSISTANT_ID"; then
    missing_configs+=("OPENAI_ASSISTANT_ID")
fi

if ! check_env_var "WHMCS_API_URL"; then
    missing_configs+=("WHMCS_API_URL")
fi

if ! check_env_var "WHMCS_IDENTIFIER"; then
    missing_configs+=("WHMCS_IDENTIFIER")
fi

if ! check_env_var "WHMCS_SECRET"; then
    missing_configs+=("WHMCS_SECRET")
fi

if ! check_env_var "WHATICKET_URL"; then
    missing_configs+=("WHATICKET_URL")
fi

if ! check_env_var "WHATICKET_TOKEN"; then
    missing_configs+=("WHATICKET_TOKEN")
fi

# Se h√° configura√ß√µes faltando
if [ ${#missing_configs[@]} -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA"
    echo "=========================="
    echo ""
    echo "‚ùå Vari√°veis n√£o configuradas:"
    for config in "${missing_configs[@]}"; do
        echo "   - $config"
    done
    echo ""
    echo "üîß CONFIGURAR AGORA:"
    echo ""
    
    # Mostrar tokens se existirem
    if [ -f "tokens.txt" ]; then
        echo "üîë Tokens dispon√≠veis em tokens.txt:"
        cat tokens.txt | head -20
        echo ""
    fi
    
    echo "üìù Edite o arquivo .env:"
    echo "   nano .env"
    echo ""
    echo "üí° Configura√ß√µes m√≠nimas necess√°rias:"
    echo "   1. OPENAI_API_KEY=sk-proj-..."
    echo "   2. OPENAI_ASSISTANT_ID=asst_..."
    echo "   3. WHMCS_API_URL=https://seu-whmcs.com/includes/api.php"
    echo "   4. WHMCS_IDENTIFIER=seu_identifier"
    echo "   5. WHMCS_SECRET=sua_secret"
    echo "   6. WHATICKET_URL=https://seu-whaticket.com"
    echo "   7. WHATICKET_TOKEN=seu_token"
    echo ""
    echo "üîÑ Execute novamente ap√≥s configurar: ./quick-start.sh"
    exit 1
fi

echo "‚úÖ Configura√ß√£o v√°lida!"

# Verificar se est√° compilado
if [ ! -d "dist" ] || [ ! -f "dist/server.js" ]; then
    echo ""
    echo "üî® Compilando projeto..."
    npm run build
fi

# Verificar depend√™ncias
echo ""
echo "üì¶ Verificando depend√™ncias..."
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias..."
    npm install
fi

# Testar servi√ßos opcionais
echo ""
echo "üîç Verificando servi√ßos..."

# Redis
if command -v redis-cli &> /dev/null; then
    if redis-cli ping &> /dev/null 2>&1; then
        echo "‚úÖ Redis: Funcionando"
    else
        echo "‚ö†Ô∏è  Redis: Instalado mas n√£o iniciado"
        echo "üí° Inicie com: sudo systemctl start redis-server"
    fi
else
    echo "‚ÑπÔ∏è  Redis: N√£o instalado (usar√° cache em mem√≥ria)"
fi

# PostgreSQL
if command -v psql &> /dev/null; then
    if sudo -u postgres psql -c "SELECT 1;" &> /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL: Funcionando"
    else
        echo "‚ö†Ô∏è  PostgreSQL: Instalado mas com problemas"
    fi
else
    echo "‚ÑπÔ∏è  PostgreSQL: N√£o instalado (logs no console)"
fi

echo ""
echo "üöÄ INICIANDO WHMCS ASSISTANT"
echo "============================"

# Menu de op√ß√µes
echo ""
echo "Escolha como iniciar:"
echo "1) üîß Desenvolvimento (com hot reload)"
echo "2) üöÄ Produ√ß√£o (vers√£o compilada)"
echo "3) ‚ö° Simples (vers√£o JavaScript)"
echo "4) üè• Apenas testar sa√∫de"
echo "5) üîç Ver configura√ß√µes"
echo ""

read -p "Op√ß√£o [1-5]: " -n 1 -r
echo ""

case $REPLY in
    1)
        echo "üîß Iniciando em modo desenvolvimento..."
        echo "üì± Webhook: http://localhost:3000/webhook"
        echo "üè• Health: http://localhost:3000/health"
        echo ""
        npm run dev
        ;;
    2)
        echo "üöÄ Iniciando em modo produ√ß√£o..."
        npm run build
        echo "üì± Webhook: http://localhost:3000/webhook"
        echo "üè• Health: http://localhost:3000/health"
        echo ""
        npm start
        ;;
    3)
        echo "‚ö° Iniciando vers√£o simples..."
        echo "üì± Webhook: http://localhost:3000/webhook"
        echo "üè• Health: http://localhost:3000/health"
        echo ""
        npm run start:simple
        ;;
    4)
        echo "üè• Testando sa√∫de do sistema..."
        echo ""
        npm run build > /dev/null 2>&1
        
        # Iniciar em background para testar
        npm start &
        SERVER_PID=$!
        
        # Aguardar inicializa√ß√£o
        echo "‚è≥ Aguardando inicializa√ß√£o..."
        sleep 10
        
        # Testar health
        if curl -s http://localhost:3000/health > /dev/null; then
            echo "‚úÖ Sistema funcionando!"
            curl -s http://localhost:3000/health | jq .
        else
            echo "‚ùå Sistema com problemas"
        fi
        
        # Parar servidor
        kill $SERVER_PID 2>/dev/null || true
        ;;
    5)
        echo "üîç Configura√ß√µes atuais:"
        echo ""
        echo "üìä Vari√°veis configuradas:"
        echo "‚úÖ OPENAI_API_KEY: $(grep "^OPENAI_API_KEY=" .env | cut -d'=' -f2 | head -c 20)..."
        echo "‚úÖ OPENAI_ASSISTANT_ID: $(grep "^OPENAI_ASSISTANT_ID=" .env | cut -d'=' -f2)"
        echo "‚úÖ WHMCS_API_URL: $(grep "^WHMCS_API_URL=" .env | cut -d'=' -f2)"
        echo "‚úÖ WHATICKET_URL: $(grep "^WHATICKET_URL=" .env | cut -d'=' -f2)"
        echo ""
        echo "üîß Para editar: nano .env"
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
        exit 1
        ;;
esac